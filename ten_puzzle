#!/usr/bin/env python3
# SPDX-FileCopyrightText: 2024 Akari Hirohara
# SPDX-License-Identifier: BSD-3-Clause

import itertools
import sys

# すべての四則演算を試す関数
def find_expressions(nums):
    operators = ['+', '-', '*', '/']
    results = []

    # すべての演算子の組み合わせを試す
    for ops in itertools.product(operators, repeat=3):
        # 4つの式パターンを生成
        expr1 = f"(({nums[0]} {ops[0]} {nums[1]}) {ops[1]} {nums[2]}) {ops[2]} {nums[3]}"
        expr2 = f"({nums[0]} {ops[0]} ({nums[1]} {ops[1]} {nums[2]})) {ops[2]} {nums[3]}"
        expr3 = f"{nums[0]} {ops[0]} (({nums[1]} {ops[1]} {nums[2]}) {ops[2]} {nums[3]})"
        expr4 = f"{nums[0]} {ops[0]} ({nums[1]} {ops[1]} ({nums[2]} {ops[2]} {nums[3]}))"

        # 4つの式を評価して結果が10になるものを見つける
        for expr in [expr1, expr2, expr3, expr4]:
            try:
                # 結果が10になるかチェック
                if abs(eval(expr) - 10) < 1e-6:  
                    results.append(expr)
            except ZeroDivisionError:
                # ゼロ除算エラーを無視
                pass

    return results

def main():
    # 標準入力から自然数を受け取る
    user_input = sys.stdin.read().strip()

    # 入力をスペースで区切ってリストに変換
    try:
        nums = list(map(int, user_input.split()))
        
        # 自然数が4つでない場合終了ステータス1
        if len(nums) != 4:
            print(1)
            sys.exit(1)

        # 各数字が自然数で無い場合終了ステータス1
        if not all(num > 0 for num in nums):
            print(1)
            sys.exit(1)

        # 結果が10になる式を探す
        expressions = find_expressions(nums)
        
        if expressions:
            for expr in expressions:
                print(f"{expr} = 10")
            sys.exit(0)
        else:
            print(1)
            sys.exit(1)
    
    except ValueError:
        print(1)
        sys.exit(1)

if __name__ == "__main__":
    main()

